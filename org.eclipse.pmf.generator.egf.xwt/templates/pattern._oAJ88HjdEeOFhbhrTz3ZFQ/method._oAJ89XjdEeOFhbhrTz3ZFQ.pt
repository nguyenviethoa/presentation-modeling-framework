 /******************************************************************************* 
 * Copyright (c) 2006, 2016 Soyatec (http://www.soyatec.com) and others. 
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0 
 * which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html 
 * 
 * Contributors: 
 * Soyatec - initial API and implementation 
 *******************************************************************************/ 
 
<% String _package = (String)ctx.getValue(Constants.VIEW_PACKAGE); 
%>
package <%=_package%>;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.provider.EcoreItemProviderAdapterFactory;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.edit.command.AbstractOverrideableCommand;
import org.eclipse.emf.edit.command.AddCommand;
import org.eclipse.emf.edit.command.MoveCommand;
import org.eclipse.emf.edit.command.RemoveCommand;
import org.eclipse.emf.edit.command.SetCommand;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.ui.celleditor.FeatureEditorDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.xwt.XWT;

public class AbstractView extends Composite {

	public AbstractView(Composite parent, int style) {
		super(parent, style);
	}

	protected EditingDomain getEditingDomain(EObject owner) {
		return AdapterFactoryEditingDomain.getEditingDomainFor(owner);
	}

	protected void performAddEvent(String featureName) {
		Object dataContext = XWT.getDataContext(this);
		if (dataContext instanceof EObject) {
			EObject eObj = (EObject) dataContext;
			EStructuralFeature sf = eObj.eClass().getEStructuralFeature(featureName);
			
			EcoreItemProviderAdapterFactory eObjAdapterFactory = new EcoreItemProviderAdapterFactory();
			if (eObjAdapterFactory.isFactoryForType(IItemLabelProvider.class)) {
				IItemLabelProvider labelProviderObj = (IItemLabelProvider) eObjAdapterFactory.adapt(eObj, IItemLabelProvider.class);
				if (labelProviderObj != null) {
					
			    if (sf != null && sf.isMany() && sf.isChangeable()) {
				   EClassifier eType = sf.getEType();
				
				if (eType instanceof EDataType) {
					List<Object> currentValuteList = AbstractOverrideableCommand.getOwnerList(eObj, sf);
					FeatureEditorDialog dialogDataTypeList = new FeatureEditorDialog(new Shell(),
							new LabelProvider(), labelProviderObj.getText(eObj), eType, 
							new ArrayList<Object>(currentValuteList),
							sf.getName().substring(0, 1).toUpperCase() + sf.getName().substring(1).replaceAll("(?!^)([A-Z])", " $1"), 
							null, false, false, true);
					if (dialogDataTypeList.open() == Window.OK) {
						doSet(eObj, sf, dialogDataTypeList.getResult());
					}
				  }
				  
				if (eType instanceof EClass && !(((EClass) eType).isAbstract() || ((EClass) eType).isInterface())) {
					EObject newObject = eType.getEPackage().getEFactoryInstance().create((EClass) eType);
					boolean hasResource = true;
					if (!((EReference) sf).isContainment()) {
						// hasResource = doAddResource(eObj.eResource(),
						// newObject);
						final Collection<?> choiceOfValues = getChoiceOfValues(eObj, eType);
						final List<Object> currentList = AbstractOverrideableCommand.getOwnerList(eObj, sf);
						List<String> currentOfValuesText = new ArrayList<String>();
						List<String> choiceOfValuesText = new ArrayList<String>();

						for (Object ObjectValue : currentList) {
							EObject object = (EObject) ObjectValue;
							EcoreItemProviderAdapterFactory factory = new EcoreItemProviderAdapterFactory();
							if (factory.isFactoryForType(IItemLabelProvider.class)) {
								IItemLabelProvider labelProvider = (IItemLabelProvider) factory.adapt(object,
										IItemLabelProvider.class);
								if (labelProvider != null) {
									currentOfValuesText.add(labelProvider.getText(object));
								}
							}
						}
                         for (Object value : choiceOfValues) {
							EObject object = (EObject) value;
							EcoreItemProviderAdapterFactory factory = new EcoreItemProviderAdapterFactory();
							if (factory.isFactoryForType(IItemLabelProvider.class)) {
								IItemLabelProvider labelProvider = (IItemLabelProvider) factory.adapt(object,
										IItemLabelProvider.class);
								if (labelProvider != null) {
									choiceOfValuesText.add(labelProvider.getText(object));
								}
							}
						}
						FeatureEditorDialog dialog = new FeatureEditorDialog(getDisplay().getActiveShell(),
								new LabelProvider(), labelProviderObj.getText(eObj), eType, currentOfValuesText, 
								sf.getName().substring(0, 1).toUpperCase() + sf.getName().substring(1).replaceAll("(?!^)([A-Z])", " $1"),
								new ArrayList<Object>(choiceOfValuesText), false, true, true);

						if (dialog.open() == Window.OK) {
							List<Object> listToAdd = new ArrayList<Object>();
							for (Object objectName : dialog.getResult()) {
								String name = (String) objectName;
								for (Object obj : choiceOfValues) {
									EObject object = (EObject) obj;
									EcoreItemProviderAdapterFactory factory = new EcoreItemProviderAdapterFactory();
									if (factory.isFactoryForType(IItemLabelProvider.class)) {
										IItemLabelProvider labelProvider = (IItemLabelProvider) factory.adapt(object, IItemLabelProvider.class);
										if (labelProvider != null) {
											if (labelProvider.getText(object).equals(name)) {
												listToAdd.add(obj);
											}
										}
									}
								}
								
						 doSet(eObj, sf, listToAdd);
						}
					  }
					} else if (hasResource) {
						doAdd(eObj, sf, (List<?>) Collections.singletonList(newObject));
					}
				}
			}
		  }
	   }
	  }
	}



	private Collection<?> getChoiceOfValues(EObject eObj, EClassifier type) {
		return ItemPropertyDescriptor.getReachableObjectsOfType(eObj, type);
	}

	protected boolean doAddResource(Resource resource, EObject newObject) {
		// TODO: find the eContainer and perform add.
		return false;
	}

	protected boolean doSet(EObject owner, EStructuralFeature feature, List<?> newChild) {
		if (owner == null || feature == null || newChild == null) {
			return false;
		}
		EditingDomain editingDomain = getEditingDomain(owner);
		if (editingDomain != null) {
			Command command = SetCommand.create(editingDomain, owner, feature, newChild);
			if (command != null && command.canExecute()) {
				CommandStack commandStack = editingDomain.getCommandStack();
				if (commandStack != null) {
					commandStack.execute(command);
				} else {
					command.execute();
				}
				return true;
			}
		} else {
			List<Object> ownerList = AddCommand.getOwnerList(owner, feature);
			if (ownerList != null) {
				return ownerList.addAll(newChild);
			}
		}
		return false;
	}
	protected boolean doAdd(EObject owner, EStructuralFeature feature, List<?> newChild) {
		if (owner == null || feature == null || newChild == null) {
			return false;
		}
		EditingDomain editingDomain = getEditingDomain(owner);
		if (editingDomain != null) {
			Command command = AddCommand.create(editingDomain, owner, feature, newChild);
			if (command != null && command.canExecute()) {
				CommandStack commandStack = editingDomain.getCommandStack();
				if (commandStack != null) {
					commandStack.execute(command);
				} else {
					command.execute();
				}
				return true;
			}
		} else {
			List<Object> ownerList = AddCommand.getOwnerList(owner, feature);
			if (ownerList != null) {
				return ownerList.addAll(newChild);
			}
		}
		return false;
	}


	protected void performRemoveEvent(String featureName) {
		org.eclipse.jface.viewers.Viewer viewer = (org.eclipse.jface.viewers.Viewer) XWT
				.findElementByName(this, featureName + "Viewer");
		if (viewer == null) {
			return;
		}
		ISelection selection = viewer.getSelection();
		if (selection.isEmpty()) {
			return;
		}
		Object element = ((IStructuredSelection) selection).getFirstElement();
		if (element == null) {
			return;
		}
		Object dataContext = XWT.getDataContext(this);
		if (dataContext instanceof EObject) {
			EObject eObj = (EObject) dataContext;
			EStructuralFeature sf = eObj.eClass().getEStructuralFeature(
					featureName);
			if (sf != null && sf.isMany() && sf.isChangeable()) {
				doRemove(eObj, sf, element);
			}
		}

	}

	protected boolean doRemove(EObject owner, EStructuralFeature feature,
			Object element) {
		if (owner == null || feature == null || element == null) {
			return false;
		}
		EditingDomain domain = getEditingDomain(owner);
		if (domain != null) {
			Command command = RemoveCommand.create(domain, owner, feature,
					element);
			if (command != null && command.canExecute()) {
				CommandStack commandStack = domain.getCommandStack();
				if (commandStack != null) {
					commandStack.execute(command);
				} else {
					command.execute();
				}
				return true;
			}
		} else {
			EList<Object> ownerList = RemoveCommand
					.getOwnerList(owner, feature);
			if (ownerList != null) {
				return ownerList.remove(element);
			}
		}
		return false;
	}

	protected void performMoveUpEvent(String featureName) {
		org.eclipse.jface.viewers.Viewer viewer = (org.eclipse.jface.viewers.Viewer) XWT
				.findElementByName(this, featureName + "Viewer");
		if (viewer == null) {
			return;
		}
		ISelection selection = viewer.getSelection();
		if (selection.isEmpty()) {
			return;
		}
		Object element = ((IStructuredSelection) selection).getFirstElement();
		if (element == null) {
			return;
		}
		Object dataContext = XWT.getDataContext(this);
		if (dataContext instanceof EObject) {
			EObject eObj = (EObject) dataContext;
			EStructuralFeature sf = eObj.eClass().getEStructuralFeature(
					featureName);
			EList<Object> ownerList = AbstractOverrideableCommand.getOwnerList(
					eObj, sf);
			if (ownerList == null || !ownerList.contains(element)) {
				return;
			}
			int index = ownerList.indexOf(element);
			if (index >= 1) {
				doMove(eObj, sf, element, index - 1);
			}
		}
	}

	protected boolean doMove(EObject owner, EStructuralFeature feature,
			Object value, int index) {
		if (owner == null || feature == null || value == null) {
			return false;
		}
		EditingDomain domain = getEditingDomain(owner);
		if (domain != null) {
			Command command = MoveCommand.create(domain, owner, feature, value,
					index);
			if (command != null && command.canExecute()) {
				CommandStack commandStack = domain.getCommandStack();
				if (commandStack != null) {
					commandStack.execute(command);
				} else {
					command.execute();
				}
				return true;
			}
		} else {
			EList<Object> ownerList = AbstractOverrideableCommand.getOwnerList(
					owner, feature);
			if (ownerList != null && index >= 0 && index < ownerList.size()) {
				ownerList.move(index, value);
				return true;
			}
		}
		return false;
	}

	protected void performMoveDownEvent(String featureName) {
		org.eclipse.jface.viewers.Viewer viewer = (org.eclipse.jface.viewers.Viewer) XWT
				.findElementByName(this, featureName + "Viewer");
		if (viewer == null) {
			return;
		}
		ISelection selection = viewer.getSelection();
		if (selection.isEmpty()) {
			return;
		}
		Object element = ((IStructuredSelection) selection).getFirstElement();
		if (element == null) {
			return;
		}
		Object dataContext = XWT.getDataContext(this);
		if (dataContext instanceof EObject) {
			EObject eObj = (EObject) dataContext;
			EStructuralFeature sf = eObj.eClass().getEStructuralFeature(
					featureName);
			EList<Object> ownerList = AbstractOverrideableCommand.getOwnerList(
					eObj, sf);
			if (ownerList == null || !ownerList.contains(element)) {
				return;
			}
			int index = ownerList.indexOf(element);
			if (index < (ownerList.size() - 1)) {
				doMove(eObj, sf, element, index + 1);
			}
		}
	}
}
