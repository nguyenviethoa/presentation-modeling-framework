 /******************************************************************************* 
 * Copyright (c) 2006, 2016 Soyatec (http://www.soyatec.com) and others. 
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0 
 * which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html 
 * 
 * Contributors: 
 * Soyatec - initial API and implementation 
 *******************************************************************************/ 
 
package <%=parameter.getName()%>.part;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.internal.views.properties.tabbed.view.TabbedPropertyRegistry;
import org.eclipse.ui.internal.views.properties.tabbed.view.TabbedPropertyRegistryFactory;
import org.eclipse.ui.views.properties.tabbed.ITabDescriptor;
import org.eclipse.ui.views.properties.tabbed.ITabDescriptorProvider;
import org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor;
import org.eclipse.xwt.ui.workbench.properties.XWTTabDescriptor;

@SuppressWarnings("restriction")
public class XWTTabDescriptorProvider extends org.eclipse.xwt.ui.workbench.properties.XWTTabDescriptorProvider {
	
	@SuppressWarnings("unchecked")
	@Override
	protected void addTabDescriptors(List<ITabDescriptor> descriptors) {
<%		
		org.eclipse.pmf.pim.ui.PropertiesPart model = null;
		org.eclipse.pmf.pim.ui.Container container = parameter.getMain();
		if (container != null){
			org.eclipse.emf.common.util.EList<org.eclipse.pmf.pim.UIObject> children = container.getChildren();
			for(org.eclipse.pmf.pim.UIObject child: children){
				if (child instanceof org.eclipse.pmf.pim.ui.PropertiesPart){
					model = (org.eclipse.pmf.pim.ui.PropertiesPart)child;
					
				
		if (model != null){
		String partText = org.eclipse.pmf.generator.egf.xwt.i18n.ExternalStringsUtil.externalize(ctx, model, model.getName());
%>		
		//part: <%=partText%>		
<%
			org.eclipse.emf.common.util.EList<PropertyTab> tabs = model.getTabs();
			for(PropertyTab tab: tabs){
				String tabText = org.eclipse.pmf.generator.egf.xwt.i18n.ExternalStringsUtil.externalize(ctx, tab, tab.getName());
%>		
				//tab: <%=tabText%>
				{
					String tabId = "<%=tab.getId()%>";
					XWTTabDescriptor tabDesc = new XWTTabDescriptor(tabId, "<%=tabText%>", "basic");
					descriptors.add(tabDesc);
<%
					DataForm content = tab.getContent();
					if (content != null){
						String className = parameter.getName() + ".views." + content.getDataContextType().getName() + content.getName() + "View";
							DataType dataType = content.getResolvedDataContextType();
							String inputTypeName = null;
							if (dataType != null){
								inputTypeName = dataType.getRuntimeName();
							}
							if (inputTypeName == null){
								inputTypeName = "org.eclipse.emf.ecore.EObject";
							}
%>
								//section: <%=content.getName()%>
								XWTSectionDescriptor sectionDesc = new XWTSectionDescriptor(
									"<%=tab.getId()%>Section", tabId, "<%=className%>");	
								sectionDesc.addInputType("<%=inputTypeName%>");		
								tabDesc.getSectionDescriptors().add(sectionDesc);
<%			
					}
%>
				}
<%
			}//for tabs
%>
<%
		}//if model != null
		}
	}
}
%>
	}//addTabDescriptors

}
